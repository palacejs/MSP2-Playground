// Language system (Sadece TÃ¼rkÃ§e destekleyecek ÅŸekilde basitleÅŸtirildi)
const LANGUAGES = [
  { key: "tr-TR", flag: "ğŸ‡¹ğŸ‡·", name: "TÃ¼rkiye" },
];

const TRANSLATIONS = {
  "tr-TR": {
    aboutBtn: "HakkÄ±nda",
    langBtn: "Dil",
    newsBtn: "Haberler",
    langTitle: "Dil SeÃ§", 
    aboutTitle: "MSP2 MODS HakkÄ±nda",
    newsTitle: "Haberler & GÃ¼ncellemeler",
    subtext: `ArtÄ±k geliÅŸtirilmiÅŸ araÃ§ ile her ÅŸeyi rahatÃ§a yapabilirsiniz.<br>
    EÄŸer bir ÅŸey olmuyorsa, Ã¶nce <a href="https://violentmonkey.github.io/get-it/" target="_blank" style="color:#6effb2;">Violentmonkey</a> kurun.`,
    info: "UyarÄ±: Bu modlar 15.09.2025 itibarÄ±yla gÃ¼ncelleme desteÄŸi kesildi, ileride optimizasyon ve performans dÃ¼ÅŸÃ¼ÅŸÃ¼ yaÅŸanabilir.",
    trollExpired: "MSP2 Troll lisans sÃ¼resi doldu.",
    about: `<p>
      MSP2 MODS; MSP2 iÃ§in Ã¶zel modlar ve yardÄ±mcÄ± araÃ§lar sunan bir platformdur.
      Sitede Ã§eÅŸitli modlarÄ± kurarak MSP2 deneyiminizi geliÅŸtirebilirsiniz.
    </p>
    <p>
      <b>NasÄ±l kullanÄ±lÄ±r?</b> Herhangi bir modun "Kur" butonuna tÄ±klayÄ±n. TarayÄ±cÄ±nÄ±z tepki vermezse Ã¶nce <a href="https://violentmonkey.github.io/get-it/" target="_blank" style="color:#6effb2;">Violentmonkey</a> kurun.
    </p>
    <p>
      <b>Not:</b> MSP2 MODS 15.09.2025 sonrasÄ± gÃ¼ncelleme almayacaktÄ±r, fakat tÃ¼m modlar kullanÄ±labilir kalacaktÄ±r.
    </p>
    <h4 style="color: #6effb2; margin: 15px 0 10px 0;">Mevcut Ã–zellikler:</h4>
    <ul>
        <li><b>MSP2 MOD</b>: Ã–zel MSP2 Ã¶zellikleri ve modlarÄ± yÃ¼kler.</li>
        <li><b>ARC MSP</b>: MSP2 fotoÄŸraf arÅŸivine eriÅŸim saÄŸlar.</li>
    </ul>`
  }
};

// Current language state (Sadece TÃ¼rkÃ§e olarak ayarlandÄ±)
let currentLang = "tr-TR";

// Utility function to get translated text from JSON or fallback (BasitleÅŸtirildi)
function getTranslatedText(jsonOrString, targetLang = null) {
  // Tek dil olduÄŸu iÃ§in doÄŸrudan string dÃ¶nebiliriz.
  return jsonOrString || '';
}

// Utility function to break text at specified character limit (KaldÄ±rÄ±lan haber yÃ¶netimi ile ilgiliydi, ancak genel kullanÄ±m iÃ§in bÄ±rakÄ±labilir)
function breakTextAtLimit(text, limit = 40) {
  if (!text || text.length <= limit) return text;
  
  const words = text.split(' ');
  const lines = [];
  let currentLine = '';
  
  for (const word of words) {
    if ((currentLine + word).length > limit) {
      if (currentLine) {
        lines.push(currentLine.trim());
        currentLine = word + ' ';
      } else {
        lines.push(word);
        currentLine = '';
      }
    } else {
      currentLine += word + ' ';
    }
  }
  
  if (currentLine.trim()) {
    lines.push(currentLine.trim());
  }
  
  return lines.join('<br>');
}

// Language functionality (Sadece mevcut TÃ¼rkÃ§e metinleri yÃ¼kleyecek ve baÅŸka bir dil seÃ§eneÄŸi sunmayacak)
function loadLanguage(langKey) {
  currentLang = langKey; // Her zaman 'tr-TR' olacak
  const trans = TRANSLATIONS[langKey];
  if (!trans) return;

  // UI elemanlarÄ±nÄ± gÃ¼ncelle
  const elements = {
    'aboutBtnTxt': trans.aboutBtn,
    'langBtnTxt': trans.langBtn, 
    'newsBtnTxt': trans.newsBtn,
    'langTitle': trans.langTitle,
    'aboutTitle': trans.aboutTitle,
    'newsTitle': trans.newsTitle,
    'subtextMain': trans.subtext,
    'aboutText': trans.about,
    'trollNotificationText': trans.trollExpired
  };

  Object.keys(elements).forEach(id => {
    const element = document.getElementById(id);
    if (element) {
      if (id === 'subtextMain' || id === 'aboutText') {
        element.innerHTML = elements[id];
      } else {
        element.textContent = elements[id];
      }
    }
  });

  // Warning text'i Ã¶zel olarak gÃ¼ncelliyoruz
  const warningTextElement = document.getElementById('warningText');
  if (warningTextElement) {
      warningTextElement.querySelector('.warning-message').textContent = trans.info.replace('UyarÄ±: ', ''); // "UyarÄ±:" kÄ±smÄ± HTML'de sabit olduÄŸu iÃ§in sadece mesajÄ± deÄŸiÅŸtiriyoruz.
  }

  // Store in localStorage (Yine de kaydedebiliriz, ancak tek dil olduÄŸu iÃ§in Ã§ok anlamÄ± kalmaz)
  localStorage.setItem('msp2mods_lang', langKey);
  
  // Dil modalÄ±nÄ± kapat
  const langModal = document.getElementById('langModal');
  if (langModal) {
    closeModal('langModal');
  }
}

function renderLanguageList() {
  const container = document.getElementById('langList');
  if (!container) return;
  
  container.innerHTML = '';
  
  // Sadece TÃ¼rkÃ§e seÃ§eneÄŸi ekleniyor
  LANGUAGES.forEach(lang => {
    const item = document.createElement('div');
    item.className = `lang-item ${lang.key === currentLang ? 'selected' : ''}`;
    item.innerHTML = `<span>${lang.flag}</span><span>${lang.name}</span>`;
    item.onclick = () => loadLanguage(lang.key); // Fonksiyonu Ã§aÄŸÄ±rmak, aslÄ±nda UI gÃ¼ncellemesini tetikler ama dil deÄŸiÅŸmez.
    container.appendChild(item);
  });
}

// Make functions global for access from main.js and other scripts
window.TRANSLATIONS = TRANSLATIONS;
window.currentLang = currentLang;
window.loadLanguage = loadLanguage;
window.renderLanguageList = renderLanguageList;
window.getTranslatedText = getTranslatedText;
window.parseJSONSafely = (jsonString) => jsonString; // BasitleÅŸtirildi
window.breakTextAtLimit = breakTextAtLimit;
